{
  "_from": "plugin",
  "_id": "plugin@0.3.3",
  "_inBundle": false,
  "_integrity": "sha1-CRQKYk8XVNs6gzYRqYjKbkdO7uE=",
  "_location": "/plugin",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "plugin",
    "fetchSpec": "latest",
    "name": "plugin",
    "raw": "plugin",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/plugin/-/plugin-0.3.3.tgz",
  "_shasum": "09140a624f1754db3a833611a988ca6e474eeee1",
  "_shrinkwrap": null,
  "_spec": "plugin",
  "_where": "/Users/altutar/Desktop/hackathon/milleniaires-app",
  "author": {
    "name": "Craig Condon"
  },
  "browserify": "./lib/web.js",
  "bugs": {
    "url": "https://github.com/crcn/plugin.js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "async": "0.1.x",
    "dref": "0.0.x",
    "outcome": "0.0.x",
    "resolve": "0.2.x",
    "sift": "0.0.x",
    "step": "0.0.x",
    "structr": "0.2.x",
    "toarray": "0.0.x",
    "underscore": "1.4.x"
  },
  "deprecated": false,
  "description": "Plugin library",
  "devDependencies": {},
  "homepage": "https://github.com/crcn/plugin.js#readme",
  "main": "./lib/node.js",
  "name": "plugin",
  "optionalDependencies": {},
  "readme": "# Plugin.js\n\n## Features\n\n- ability to load entire directories\n- add remote plugins (dnode)\n\n## Example\n\nbootstrap.js\n\n```javascript\nvar plugin = require(\"plugin\"),\nexpress = require(\"express\"),\n\nplugin(express()).\nparams({\n\thttp: { port: 8080 }\n}).\nrequire(__dirname + \"/config.js\").\nrequire(__dirname + \"/someRoutes.js\").\nload();\n```\n\nconfig.js\n\n```javascript\nexports.plugin = function(server, loader) {\n\tserver.listen(loader.params(\"http.port\") || 80);\n}\n```\n\nsomeRoutes.js\n```javascript\nmodule.exports = function(server) {\n    server.get(\"/hello\", function(req, res) {\n        res.end(\"world!\");\n    })\n}\n```\n\n\n## Plugin API\n\n### loader .plugin(plugInto, ...)\n\nInitializes the loader for local / remote plugins. `plugInto` is passed into the first parameter when calling `.plugin()` on each required module.\n\n### loader.use(extension)\n\nExtends the loader. This allows you to customize how modules are loaded into your sandbox.\n\n```javascript\nrequire(\"plugin\")().\nuse(require(\"plugin-dnode\")).\nrequire(\"dnode://localhost\").\nload();\n```\n\n### loader.params(keyOrParams, value)\n\nGet / set params\n\nbootstrap.js\n\n```javascript\nrequire(\"plugin\")().\nparams(\"some.message\", 8080).\nrequire(__dirname + \"/hello.js\").\nload();\n```\n\nserver.js\n```javascript\nexports.plugin = function(loader) {\n\tconsole.log(loader.params(\"some.message\"));\n}\n```\n\n### loader.require(source, ...)\n\npath to the plugins\n\n```javascript\nloader.\nrequire(__dirname + \"/plugin.js\").\nrequire(__dirname + \"/someDirectory.js\").\nrequire(\"multiple\", \"plugins\").\nrequire(\"dnode://localhost\").\nload();\n```\n\n### loader.load(callback)\n\nloads the required dependencies\n\n### loader.module(search)\n\nReturns one loaded module based on the search query. Note that calling this method\nmay load the given module if it hasn't already. Here's a real-world example:\n\nbootstrap.js\n\n```javascript\nrequire(\"plugin\")().\nparams(\"http.port\", 8080).\nrequire(__dirname + \"/server.js\").\nrequire(__dirname + \"/routes.js\").\nload();\n```\n\nserver.js\n\n```javascript\nexports.isHttpServer = true; //not needed - just used for searching\nexports.plugin = function(loader) {\n\tvar server = express();\n\tserver.listen(loader.params(\"http.port\"));\n\treturn server;\n}\n```\n\nroutes.js\n\n```javascript\nexports.plugin = function(loader) {\n\tvar server = loader.module(\"server\");\n\tserver.get(\"/hello\", function(req, res) {\n\t\tres.end(\"hello world!\");\n\t})\n}\n```\n\nAlso note that you can search based on attributes. Here's `routes.js` again:\n\n```javascript\nexports.plugin = function(loader) {\n\tvar server = loader.module({ isHttpServer: true });\n\t//do stuff here\n}\n```\n\n### loader.modules(search)\n\nJust like `loader.module(search)`, but returns multiple modules.\n\n### loader.exports\n\nThis is all the plugins combined, and it's set once everything's loaded.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/crcn/plugin.js.git"
  },
  "version": "0.3.3"
}
